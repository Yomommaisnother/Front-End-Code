import sys
import pygame
from settings import Settings
from ship import Ship
from bullet import Bullet
from alien import Alien
from random import randint
from game_stats import GameStats
from time import sleep
from button import Button
from scoreboard import Scoreboard



class AlienInvasion:
	
	
	def __init__(self):
		"""Oveerall Game's assets"""
		pygame.init()
		

		self.settings= Settings()
		self.screen=pygame.display.set_mode(
			(self.settings.screen_width, self.settings.screen_height)
		)
		self.settings.screen_width=self.screen.get_rect().width
		self.settings.screen_height = self.screen.get_rect().height
		pygame.display.set_caption("Alien Invasion")
		self.stats = GameStats(self)
		self.ship= Ship(self)
		self.bullets= pygame.sprite.Group()
		self.aliens = pygame.sprite.Group()
		self._create_fleet()
		self.sb = Scoreboard(self)
		self.play_button= Button(self,"Play")
		print(f"Screen size: {self.settings.screen_width} x {self.settings.screen_height}")
		
		self.sb.show_score()
		
		
	

	def run_game(self):
		"""Start the main loop for the game."""
		while True:
			self._check_events()
			if self.stats.game_active:
				self.ship.update()
				self._update_bullets()
				self._update_aliens()


			self._update_screen()
			
			
			

	def _check_events(self):
			#Watch for keyboard and mouse events.
			for event in pygame.event.get():
				if event.type == pygame.QUIT:
					sys.exit()
				elif event.type== pygame.KEYDOWN:
					self._check_keydown_events(event)
				elif event.type == pygame.KEYUP:
					self._check_keyup_events(event)
				elif event.type == pygame.MOUSEBUTTONDOWN:
					mouse_pos =pygame.mouse.get_pos()
					self.check_play_button(mouse_pos)
				
					
	def _check_keydown_events(self,event):	
					if event.key==pygame.K_RIGHT:
						self.ship.moving_right=True
					elif event.key==pygame.K_LEFT:
						self.ship.moving_left=True
					elif event.key ==pygame.K_SPACE:
						self._fire_bullet()
					elif event.key == pygame.K_q:
						sys.exit()

	def _check_keyup_events(self, event):			
					if event.key == pygame.K_RIGHT:
						self.ship.moving_right = False
					elif event.key == pygame.K_LEFT:
						self.ship.moving_left = False		
					elif event.key == pygame.K_q:
						sys.exit()

	def _fire_bullet(self):
		"""create bullets and add it to new group"""
		if len(self.bullets) < self.settings.bullets_allowed:
		
			new_bullet= Bullet(self)
			self.bullets.add(new_bullet)
	
	def _update_screen(self):
			#Redraw the screen during each pass through the loop.
			self.screen.fill(self.settings.bg_color)
			self.ship.blitme()
			for bullet in self.bullets.sprites():
				bullet.draw_bullet()
			self.aliens.draw(self.screen)
			self.sb.show_score()
		
			if not self.stats.game_active:
				self.play_button.draw_button()
			pygame.display.flip()




	def _update_bullets(self):
			self.bullets.update()
			for bullet in self.bullets.copy():
				if bullet.rect.bottom <= 0:
					self.bullets.remove(bullet)
			self._check_bullet_alien_collisions()

	def _check_bullet_alien_collisions(self):
			#The groucollide() method checky every elementin the ist that has collide in any list pf alienss
			collisions= pygame.sprite.groupcollide(
				self.bullets,self.aliens,True,True
			)
			if collisions:
				for aliens in collisions.values():
					self.stats.score +=  self.settings.alien_points*len(aliens)
				self.sb.prep_score()
				self.sb.check_high_score()
			if not self.aliens:
				self.bullets.empty()
				self._create_fleet()
				self.stats.level += 1
				self.sb.prep_level()
				self.settings.increase_speed()
			
	
	def _create_fleet(self):
			alien=Alien(self)
			alien_width, alien_height = alien.rect.size
			available_space_x = self.settings.screen_width - (2*alien_width)
			number_aliens_x = available_space_x // (2*alien_width)
			ship_height= self.ship.rect.height
			available_space_y = self.settings.screen_height - (3*alien_height) - ship_height
			number_rows = available_space_y // (2*alien_height)	
			print(f"number_aliens_x: {number_aliens_x}, number_rows: {number_rows}")
			
			print("Screen width:", self.settings.screen_width)


			for row_number in range(number_rows):
				for alien_number in range(number_aliens_x):
							self._create_alien(alien_number,row_number)
				


	def _create_alien(self,alien_number,row_number):
		alien=Alien(self)
		alien_width, alien_height= alien.rect.size

		alien.x = alien_width + 2*alien_width * alien_number
		
		print(alien.rect.x)
		alien.rect.y = alien.rect.height + 2 * alien.rect.height* row_number
		print(f"Row: {row_number}, Alien {alien_number}, X: {alien.rect.x}")
		alien.rect.x=alien.x
		self.aliens.add(alien)
				

	def _update_aliens(self):
				
				self._check_fleet_edges()
				self.aliens.update()

				if pygame.sprite.spritecollideany(self.ship, self.aliens):
					self._ship_hit()
				
				self._check_aliens_bottom()


	def _check_fleet_edges(self):
				for alien in self.aliens.sprites():
					if alien.check_edges():
						self._change_fleet_direction()
						break
	def _change_fleet_direction(self):
				for alien in self.aliens.sprites():
					alien.rect.y+= self.settings.fleet_drop_speed
				self.settings.fleet_direction *= -1

	def _check_aliens_bottom(self):
		screen_rect=self.screen.get_rect()
		for alien in self.aliens.sprites():
			if alien.rect.bottom >= screen_rect.bottom:
				self._ship_hit()
				break


	def _ship_hit(self):
		if self.stats.ships_left>1:
			self.stats.ships_left -=1
			self.sb.prep_ships()
			self.aliens.empty()
			self.bullets.empty()
			self._create_fleet()
			self.ship.center_ship()
			sleep(0.5)
		else:
			self.stats.game_active=False
			pygame.mouse.set_visible(True)

	def check_play_button(self, mouse_pos):
		if self.play_button.rect.collidepoint(mouse_pos):
			self.stats.reset_stats()
			self.stats.game_active=True
			self.aliens.empty()
			self.bullets.empty()
			self._create_fleet() 
			self.ship.center_ship()
			self.sb.prep_ships()
			pygame.mouse.set_visible(False)

		



			#Make the most recently drawn screen visible


if __name__=='__main__':
	#Make a game instance, and run the game.
	ai= AlienInvasion()
	ai.run_game()



